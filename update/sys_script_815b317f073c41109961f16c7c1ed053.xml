<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    // 現在時刻 rightnow stores the current time
//     var rightnow = new GlideDateTime();
//     // Create a GlideDateTime object for the When needed date
//     var whenNeeded = new GlideDateTime(current.u_when_needed);

//     // If the When needed date is before rightnow, do not write the record to the database
//     // Output an error message to the screen
//     if (whenNeeded.before(rightnow)) {
//         gs.addErrorMessage("現在時刻よりも過去日が設定されています。データベースへ保存できません。");
//         //データベースアクションが実行されないようにします
//         current.setAbortAction(true);
//     }
	
// 	// 現在時刻の日付を取得
// 	var today = rightnow.getLocaDate();
// 	// when_needed項目の日付を取得
// 	var targetToday = whenNeeded.getLocalDate();
// 	// 同じ日付の場合
// 	if(today.compareTo(targetToday) == 0) {
// 		gs.addErrorMessage('同日にリクエストを送信できません');
// 		current.setAbortAction(true);
// 	}
	// Script Include関数のインスタンス生成
	var niutils = new NeedItUtils();
	var isPast = niutils.isDatePast(current.u_when_needed);
	
	if(isPast == true){
		gs.addErrorMessage('When needed 日付に過去日は設定できません。');
		current.setAbortAction(true);
	}
	
	var result = niutils.isDateToday(current.u_when_needed);
	
	// 同じ日付の場合
	if(result == true) {
		gs.addErrorMessage('同日にリクエストを送信できません');
		current.setAbortAction(true);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-09 03:07:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>815b317f073c41109961f16c7c1ed053</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_815b317f073c41109961f16c7c1ed053</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-09 12:06:45</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=815b317f073c41109961f16c7c1ed053"/>
</record_update>
